[
    // Disable Overwrite
    {},
    // Window
    {
        "context": "",
        "bindings": {
            "ctrl-w": null,
            "alt-l": "vim::ResizePaneRight",
            "alt-h": "vim::ResizePaneLeft",
            "alt-j": "vim::ResizePaneDown",
            "alt-k": "vim::ResizePaneUp",
            "ctrl-h": "workspace::ActivatePaneLeft",
            "ctrl-j": "workspace::ActivatePaneDown",
            "ctrl-k": "workspace::ActivatePaneUp",
            "ctrl-l": "workspace::ActivatePaneRight",
            "alt-cmd-0": "pane::SplitVertical",
            "cmd-0": "pane::SplitHorizontal",
            "alt-cmd-w": "workspace::CloseInactiveTabsAndPanes",
            "cmd-w": "pane::CloseActiveItem",
            "cmd-shift-f": "pane::DeploySearch",
            "cmd-shift-r": ["pane::DeploySearch", { "replace_enabled": true }]
        }
    },
    {
        "context": "VimControl && vim_mode == normal && !menu",
        "bindings": {
            "space b o": "workspace::CloseInactiveTabsAndPanes",
            "space b d": "pane::CloseActiveItem",
            "space k": ["workspace::SendKeystrokes", "cmd-5 claude enter"],
            "space g g": ["task::Spawn", { "task_name": "start lazygit" }],
            "space a e": "assistant::InlineAssist",
            "space a a": "agent::NewThread"
        }
    },
    {
        "context": "VimControl && vim_mode == visual && !menu",
        "bindings": {
            "space a e": "assistant::InlineAssist"
        }
    },
    {
        "context": "ProjectPanel",
        "bindings": {
            "cmd-1": "workspace::ToggleLeftDock"
        }
    },
    {
        "context": "!ProjectPanel",
        "bindings": {
            "cmd-1": "project_panel::ToggleFocus"
        }
    },
    {
        "context": "GitPanel",
        "bindings": {
            "cmd-2": "workspace::ToggleLeftDock"
        }
    },
    {
        "context": "!GitPanel",
        "bindings": {
            "cmd-2": "git_panel::ToggleFocus"
        }
    },
    {
        "context": "!Editor",
        "bindings": {
            "cmd-4": "editor::ToggleFocus"
        }
    },
    {
        "context": "Terminal",
        "bindings": {
            "cmd-5": "workspace::ToggleRightDock",
            "cmd-t": "workspace::NewTerminal",
            "cmd-[": "pane::ActivatePreviousItem",
            "cmd-]": "pane::ActivateNextItem"
        }
    },
    {
        "context": "!Terminal",
        "bindings": {
            "cmd-5": "terminal_panel::ToggleFocus"
        }
    },
    {
        "context": "!Diagnostics",
        "bindings": {
            "cmd-4": "diagnostics::Deploy"
        }
    },
    {
        "context": "Diagnostics",
        "bindings": {
            "cmd-4": "pane::CloseActiveItem"
        }
    },
    {
        "context": "!AgentPanel",
        "bindings": {
            "cmd-3": "agent::ToggleFocus"
        }
    },
    {
        "context": "AgentPanel",
        "bindings": {
            "cmd-3": "workspace::ToggleRightDock"
        }
    },
    // Editor
    {
        "context": "Editor",
        "use_key_equivalents": true,
        "bindings": {
            "f1": "pane::RevealInProjectPanel",
            "f6": "editor::Rename",
            "ctrl-x": "editor::Format",
            "ctrl-space": "editor::ShowCompletions",
            "ctrl-shift-space": "editor::ShowWordCompletions",
            "cmd-r": "buffer_search::DeployReplace"
        }
    },
    {
        "context": "Editor && extension == md",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-k v": "markdown::OpenPreviewToTheSide",
            "cmd-shift-v": "markdown::OpenPreview"
        }
    },
    {
        "context": "Editor && extension == svg",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-k v": "svg::OpenPreviewToTheSide",
            "cmd-shift-v": "svg::OpenPreview"
        }
    },
    {
        "context": "Editor && mode == full",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-o": "outline::Toggle",
            "ctrl-g": "go_to_line::Toggle",
            "cmd-shift-backspace": "editor::GoToPreviousChange",
            "cmd-shift-alt-backspace": "editor::GoToNextChange"
        }
    },
    {
        "context": "Workspace",
        "use_key_equivalents": true,
        "bindings": {
            // Change the default action on `menu::Confirm` by setting the parameter
            // "alt-cmd-o": ["projects::OpenRecent", {"create_new_window": true }],
            "alt-cmd-o": [
                "projects::OpenRecent",
                { "create_new_window": false }
            ],
            "ctrl-s": "workspace::Save",
            "alt-shift-enter": "toast::RunAction",
            "cmd-shift-s": "workspace::SaveAs",
            "cmd-shift-n": "workspace::NewWindow",
            "cmd-t": "project_symbols::Toggle",
            "cmd-p": "file_finder::Toggle",
            "cmd-shift-p": "command_palette::Toggle",
            "cmd-shift-d": "debug_panel::ToggleFocus",
            "cmd-?": "agent::ToggleFocus",
            "cmd-alt-s": "workspace::SaveAll",
            "cmd-k m": "language_selector::Toggle",
            "escape": "workspace::Unfollow",
            "ctrl-h": "workspace::ActivatePaneLeft",
            "ctrl-l": "workspace::ActivatePaneRight",
            "ctrl-k": "workspace::ActivatePaneUp",
            "ctrl-j": "workspace::ActivatePaneDown",
            "cmd-k shift-up": "workspace::SwapPaneUp",
            "cmd-k shift-down": "workspace::SwapPaneDown",
            "cmd-shift-x": "zed::Extensions",
            "f5": "debugger::Rerun",
            "cmd-w": "workspace::CloseActiveDock"
        }
    },
    {
        "context": "Workspace && !Terminal",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-n": "workspace::NewFile",
            "cmd-alt-r": "task::Rerun",
            "ctrl-alt-shift-r": ["task::Spawn", { "reveal_target": "center" }]
            // also possible to spawn tasks by name:
            // "foo-bar": ["task::Spawn", { "task_name": "MyTask", "reveal_target": "dock" }]
            // or by tag:
            // "foo-bar": ["task::Spawn", { "task_tag": "MyTag" }],
        }
    },
    {
        "context": "Workspace && debugger_running",
        "use_key_equivalents": true,
        "bindings": {
            "f5": null
        }
    },
    {
        "context": "Workspace && debugger_stopped",
        "use_key_equivalents": true,
        "bindings": {
            "f5": "debugger::Continue"
        }
    },
    // Bindings from Sublime Text
    {
        "context": "Editor",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-u": "editor::UndoSelection",
            "cmd-shift-u": "editor::RedoSelection",
            "ctrl-alt-backspace": "editor::DeleteToPreviousSubwordStart",
            "ctrl-alt-h": "editor::DeleteToPreviousSubwordStart",
            "ctrl-alt-delete": "editor::DeleteToNextSubwordEnd",
            "ctrl-alt-d": "editor::DeleteToNextSubwordEnd",
            "ctrl-alt-left": "editor::MoveToPreviousSubwordStart",
            "ctrl-alt-b": "editor::MoveToPreviousSubwordStart",
            "ctrl-alt-right": "editor::MoveToNextSubwordEnd",
            "ctrl-alt-f": "editor::MoveToNextSubwordEnd",
            "ctrl-alt-shift-left": "editor::SelectToPreviousSubwordStart",
            "ctrl-alt-shift-b": "editor::SelectToPreviousSubwordStart",
            "ctrl-alt-shift-right": "editor::SelectToNextSubwordEnd",
            "ctrl-alt-shift-f": "editor::SelectToNextSubwordEnd"
        }
    },
    // Bindings from Atom
    {
        "context": "Pane",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-k up": "pane::SplitUp",
            "cmd-k down": "pane::SplitDown",
            "cmd-k left": "pane::SplitLeft",
            "cmd-k right": "pane::SplitRight"
        }
    },
    // Bindings that should be unified with bindings for more general actions
    {
        "context": "Editor && renaming",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::ConfirmRename"
        }
    },
    {
        "context": "Editor && showing_completions",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::ConfirmCompletion",
            "shift-enter": "editor::ConfirmCompletionReplace",
            "tab": "editor::ComposeCompletion"
        }
    },
    {
        "context": "Editor && edit_prediction_conflict",
        "bindings": {
            "tab": "editor::AcceptEditPrediction",
            "shift-tab": "editor::ShowEditPrediction",
            "ctrl-cmd-right": "editor::AcceptPartialEditPrediction"
        }
    },
    {
        "context": "Editor && edit_prediction",
        "bindings": {
            "tab": "editor::AcceptEditPrediction",
            "shift-tab": "editor::ShowEditPrediction",
            "ctrl-cmd-right": "editor::AcceptPartialEditPrediction"
        }
    },
    {
        "context": "Editor && edit_prediction_conflict",
        "use_key_equivalents": true,
        "bindings": {
            "alt-tab": "editor::AcceptEditPrediction",
            "ctrl-cmd-right": "editor::AcceptPartialEditPrediction"
        }
    },
    {
        "context": "Editor && showing_code_actions",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::ConfirmCodeAction"
        }
    },
    {
        "context": "Editor && (showing_code_actions || showing_completions)",
        "use_key_equivalents": true,
        "bindings": {
            "up": "editor::ContextMenuPrevious",
            "ctrl-p": "editor::ContextMenuPrevious",
            "down": "editor::ContextMenuNext",
            "ctrl-n": "editor::ContextMenuNext",
            "pageup": "editor::ContextMenuFirst",
            "pagedown": "editor::ContextMenuLast"
        }
    },
    {
        "context": "Editor && showing_signature_help && !showing_completions",
        "bindings": {
            "up": "editor::SignatureHelpPrevious",
            "down": "editor::SignatureHelpNext"
        }
    },
    // Custom bindings
    {
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-alt-cmd-f": "workspace::FollowNextCollaborator",
            // TODO: Move this to a dock open action
            "cmd-shift-c": "collab_panel::ToggleFocus",
            // Only available in debug builds: opens an element inspector for development.
            "cmd-alt-i": "dev::ToggleInspector"
        }
    },
    {
        "context": "!ContextEditor > Editor && mode == full",
        "use_key_equivalents": true,
        "bindings": {
            "alt-enter": "editor::OpenExcerpts",
            "shift-enter": "editor::ExpandExcerpts",
            "cmd-alt-enter": "editor::OpenExcerptsSplit",
            "cmd-shift-e": "pane::RevealInProjectPanel",
            "cmd-f8": "editor::GoToHunk",
            "cmd-shift-f8": "editor::GoToPreviousHunk",
            "ctrl-enter": "assistant::InlineAssist",
            "ctrl-:": "editor::ToggleInlayHints"
        }
    },
    {
        "context": "PromptEditor",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-a": "agent::ToggleContextPicker",
            "cmd-alt-/": "agent::ToggleModelSelector",
            "cmd-alt-e": "agent::RemoveAllContext",
            "ctrl-[": "agent::CyclePreviousInlineAssist",
            "ctrl-]": "agent::CycleNextInlineAssist"
        }
    },
    {
        "context": "Prompt",
        "use_key_equivalents": true,
        "bindings": {
            "left": "menu::SelectPrevious",
            "right": "menu::SelectNext",
            "h": "menu::SelectPrevious",
            "l": "menu::SelectNext"
        }
    },
    {
        "context": "ProjectSearchBar && !in_replace",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-enter": "project_search::SearchInNew"
        }
    },
    {
        "context": "OutlinePanel && not_editing",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "menu::Cancel",
            "left": "outline_panel::CollapseSelectedEntry",
            "right": "outline_panel::ExpandSelectedEntry",
            "cmd-alt-c": "workspace::CopyPath",
            "alt-cmd-shift-c": "workspace::CopyRelativePath",
            "alt-cmd-r": "outline_panel::RevealInFileManager",
            "space": "outline_panel::OpenSelectedEntry",
            "shift-down": "menu::SelectNext",
            "shift-up": "menu::SelectPrevious",
            "alt-enter": "editor::OpenExcerpts",
            "cmd-alt-enter": "editor::OpenExcerptsSplit"
        }
    },
    {
        "context": "ProjectPanel",
        "use_key_equivalents": true,
        "bindings": {
            "left": "project_panel::CollapseSelectedEntry",
            "right": "project_panel::ExpandSelectedEntry",
            "cmd-n": "project_panel::NewFile",
            "cmd-d": "project_panel::Duplicate",
            "alt-cmd-n": "project_panel::NewDirectory",
            "cmd-x": "project_panel::Cut",
            "cmd-c": "project_panel::Copy",
            "cmd-v": "project_panel::Paste",
            "cmd-alt-c": "workspace::CopyPath",
            "alt-cmd-shift-c": "workspace::CopyRelativePath",
            "enter": "project_panel::Rename",
            "f2": "project_panel::Rename",
            "backspace": ["project_panel::Trash", { "skip_prompt": false }],
            "delete": ["project_panel::Trash", { "skip_prompt": false }],
            "cmd-backspace": ["project_panel::Trash", { "skip_prompt": true }],
            "cmd-delete": ["project_panel::Delete", { "skip_prompt": false }],
            "alt-cmd-r": "project_panel::RevealInFileManager",
            "ctrl-shift-enter": "project_panel::OpenWithSystem",
            "cmd-alt-backspace": [
                "project_panel::Delete",
                { "skip_prompt": false }
            ],
            "cmd-alt-shift-f": "project_panel::NewSearchInDirectory",
            "shift-down": "menu::SelectNext",
            "shift-up": "menu::SelectPrevious",
            "escape": "menu::Cancel"
        }
    },
    {
        "context": "ProjectPanel && not_editing",
        "use_key_equivalents": true,
        "bindings": {
            "space": "project_panel::Open"
        }
    },
    {
        "context": "VariableList",
        "use_key_equivalents": true,
        "bindings": {
            "left": "variable_list::CollapseSelectedEntry",
            "right": "variable_list::ExpandSelectedEntry",
            "enter": "variable_list::EditVariable",
            "cmd-c": "variable_list::CopyVariableValue",
            "cmd-alt-c": "variable_list::CopyVariableName",
            "delete": "variable_list::RemoveWatch",
            "backspace": "variable_list::RemoveWatch",
            "alt-enter": "variable_list::AddWatch"
        }
    },
    {
        "context": "GitPanel && ChangesList",
        "use_key_equivalents": true,
        "bindings": {
            "up": "menu::SelectPrevious",
            "down": "menu::SelectNext",
            "cmd-up": "menu::SelectFirst",
            "cmd-down": "menu::SelectLast",
            "enter": "menu::Confirm",
            "cmd-alt-y": "git::ToggleStaged",
            "space": "git::ToggleStaged",
            "shift-space": "git::StageRange",
            "cmd-y": "git::StageFile",
            "cmd-shift-y": "git::UnstageFile",
            "alt-down": "git_panel::FocusEditor",
            "tab": "git_panel::FocusEditor",
            "shift-tab": "git_panel::FocusEditor",
            "escape": "git_panel::ToggleFocus",
            "backspace": ["git::RestoreFile", { "skip_prompt": false }],
            "delete": ["git::RestoreFile", { "skip_prompt": false }],
            "cmd-backspace": ["git::RestoreFile", { "skip_prompt": true }],
            "cmd-delete": ["git::RestoreFile", { "skip_prompt": true }]
        }
    },
    {
        "context": "GitPanel && CommitEditor",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "git::Cancel"
        }
    },
    {
        "context": "GitDiff > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-enter": "git::Commit",
            "cmd-shift-enter": "git::Amend",
            "cmd-ctrl-y": "git::StageAll",
            "cmd-ctrl-shift-y": "git::UnstageAll"
        }
    },
    {
        "context": "CommitEditor > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::Newline",
            "cmd-enter": "git::Commit",
            "cmd-shift-enter": "git::Amend",
            "tab": "git_panel::FocusChanges",
            "shift-tab": "git_panel::FocusChanges",
            "alt-up": "git_panel::FocusChanges",
            "shift-escape": "git::ExpandCommitEditor",
            "alt-tab": "git::GenerateCommitMessage"
        }
    },
    {
        "context": "GitPanel",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-g ctrl-g": "git::Fetch",
            "ctrl-g up": "git::Push",
            "ctrl-g down": "git::Pull",
            "ctrl-g shift-up": "git::ForcePush",
            "ctrl-g d": "git::Diff",
            "ctrl-g backspace": "git::RestoreTrackedFiles",
            "ctrl-g shift-backspace": "git::TrashUntrackedFiles",
            "cmd-ctrl-y": "git::StageAll",
            "cmd-ctrl-shift-y": "git::UnstageAll",
            "cmd-enter": "git::Commit",
            "cmd-shift-enter": "git::Amend"
        }
    },
    {
        "context": "GitCommit > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::Newline",
            "escape": "menu::Cancel",
            "cmd-enter": "git::Commit",
            "cmd-shift-enter": "git::Amend",
            "alt-tab": "git::GenerateCommitMessage"
        }
    },
    {
        "context": "DebugPanel",
        "bindings": {
            "cmd-t": "debugger::ToggleThreadPicker",
            "cmd-i": "debugger::ToggleSessionPicker",
            "shift-alt-escape": "debugger::ToggleExpandItem"
        }
    },
    {
        "context": "BreakpointList",
        "bindings": {
            "space": "debugger::ToggleEnableBreakpoint",
            "backspace": "debugger::UnsetBreakpoint",
            "left": "debugger::PreviousBreakpointProperty",
            "right": "debugger::NextBreakpointProperty"
        }
    },
    {
        "context": "CollabPanel && not_editing",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-backspace": "collab_panel::Remove",
            "space": "menu::Confirm"
        }
    },
    {
        "context": "CollabPanel",
        "use_key_equivalents": true,
        "bindings": {
            "alt-up": "collab_panel::MoveChannelUp",
            "alt-down": "collab_panel::MoveChannelDown"
        }
    },
    {
        "context": "(CollabPanel && editing) > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "space": "collab_panel::InsertSpace"
        }
    },
    {
        "context": "ChannelModal",
        "use_key_equivalents": true,
        "bindings": {
            "tab": "channel_modal::ToggleMode"
        }
    },
    {
        "context": "Picker > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "menu::Cancel",
            "up": "menu::SelectPrevious",
            "down": "menu::SelectNext",
            "tab": "picker::ConfirmCompletion",
            "alt-enter": ["picker::ConfirmInput", { "secondary": false }],
            "cmd-alt-enter": ["picker::ConfirmInput", { "secondary": true }]
        }
    },
    {
        "context": "ChannelModal > Picker > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "tab": "channel_modal::ToggleMode"
        }
    },
    {
        "context": "FileFinder || (FileFinder > Picker > Editor)",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-a": "file_finder::ToggleSplitMenu",
            "cmd-shift-i": "file_finder::ToggleFilterMenu"
        }
    },
    {
        "context": "FileFinder || (FileFinder > Picker > Editor) || (FileFinder > Picker > menu)",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-p": "file_finder::SelectPrevious",
            "cmd-j": "pane::SplitDown",
            "cmd-k": "pane::SplitUp",
            "cmd-h": "pane::SplitLeft",
            "cmd-l": "pane::SplitRight"
        }
    },
    {
        "context": "TabSwitcher",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-shift-tab": "menu::SelectPrevious",
            "ctrl-up": "menu::SelectPrevious",
            "ctrl-down": "menu::SelectNext",
            "ctrl-backspace": "tab_switcher::CloseSelectedItem"
        }
    },
    {
        "context": "Terminal",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-cmd-space": "terminal::ShowCharacterPalette",
            "cmd-c": "terminal::Copy",
            "cmd-v": "terminal::Paste",
            "cmd-f": "buffer_search::Deploy",
            "cmd-a": "editor::SelectAll",
            "cmd-k": "terminal::Clear",
            "cmd-n": "workspace::NewTerminal",
            "ctrl-enter": "assistant::InlineAssist",
            "ctrl-_": null, // emacs undo
            // Some nice conveniences
            "cmd-backspace": ["terminal::SendText", "\u0015"], // ctrl-u: clear line
            "alt-delete": ["terminal::SendText", "\u001bd"], // alt-d: delete word forward
            "cmd-delete": ["terminal::SendText", "\u000b"], // ctrl-k: delete to end of line
            "cmd-right": ["terminal::SendText", "\u0005"],
            "cmd-left": ["terminal::SendText", "\u0001"],
            // Terminal.app compatibility
            "alt-left": ["terminal::SendText", "\u001bb"],
            "alt-right": ["terminal::SendText", "\u001bf"],
            "alt-b": ["terminal::SendText", "\u001bb"],
            "alt-f": ["terminal::SendText", "\u001bf"],
            "ctrl-delete": ["terminal::SendText", "\u001bd"],
            // There are conflicting bindings for these keys in the global context.
            // these bindings override them, remove at your own risk:
            "up": ["terminal::SendKeystroke", "up"],
            "pageup": ["terminal::SendKeystroke", "pageup"],
            "down": ["terminal::SendKeystroke", "down"],
            "pagedown": ["terminal::SendKeystroke", "pagedown"],
            "escape": ["terminal::SendKeystroke", "escape"],
            "enter": ["terminal::SendKeystroke", "enter"],
            "ctrl-c": ["terminal::SendKeystroke", "ctrl-c"],
            "ctrl-backspace": ["terminal::SendKeystroke", "ctrl-w"],
            "shift-pageup": "terminal::ScrollPageUp",
            "cmd-up": "terminal::ScrollPageUp",
            "shift-pagedown": "terminal::ScrollPageDown",
            "cmd-down": "terminal::ScrollPageDown",
            "shift-up": "terminal::ScrollLineUp",
            "shift-down": "terminal::ScrollLineDown",
            "shift-home": "terminal::ScrollToTop",
            "cmd-home": "terminal::ScrollToTop",
            "shift-end": "terminal::ScrollToBottom",
            "cmd-end": "terminal::ScrollToBottom",
            // Using `ctrl-shift-space` in Zed requires disabling the macOS global shortcut.
            // System Preferences->Keyboard->Keyboard Shortcuts->Input Sources->Select the previous input source (uncheck)
            "ctrl-shift-space": "terminal::ToggleViMode",
            "ctrl-alt-up": "pane::SplitUp",
            "ctrl-alt-down": "pane::SplitDown",
            "ctrl-alt-left": "pane::SplitLeft",
            "ctrl-alt-right": "pane::SplitRight",
            "cmd-alt-r": "terminal::RerunTask"
        }
    },
    {
        "context": "RateCompletionModal",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-enter": "zeta::ThumbsUpActiveCompletion",
            "cmd-shift-backspace": "zeta::ThumbsDownActiveCompletion",
            "shift-down": "zeta::NextEdit",
            "shift-up": "zeta::PreviousEdit",
            "right": "zeta::PreviewCompletion"
        }
    },
    {
        "context": "RateCompletionModal > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "zeta::FocusCompletions",
            "cmd-shift-enter": "zeta::ThumbsUpActiveCompletion",
            "cmd-shift-backspace": "zeta::ThumbsDownActiveCompletion"
        }
    },
    {
        "context": "ZedPredictModal",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "menu::Cancel"
        }
    },
    {
        "context": "ConfigureContextServerModal > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "menu::Cancel",
            "enter": "editor::Newline",
            "cmd-enter": "menu::Confirm"
        }
    },
    {
        "context": "Diagnostics",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-r": "diagnostics::ToggleDiagnosticsRefresh"
        }
    },
    {
        "context": "DebugConsole > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "menu::Confirm",
            "alt-enter": "console::WatchExpression"
        }
    },
    {
        "context": "RunModal",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-tab": "pane::ActivateNextItem",
            "ctrl-shift-tab": "pane::ActivatePreviousItem"
        }
    },
    {
        "context": "MarkdownPreview",
        "bindings": {
            "pageup": "markdown::MovePageUp",
            "pagedown": "markdown::MovePageDown"
        }
    },
    {
        "context": "KeymapEditor",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-f": "search::FocusSearch",
            "cmd-alt-f": "keymap_editor::ToggleKeystrokeSearch",
            "cmd-alt-c": "keymap_editor::ToggleConflictFilter",
            "enter": "keymap_editor::EditBinding",
            "alt-enter": "keymap_editor::CreateBinding",
            "cmd-c": "keymap_editor::CopyAction",
            "cmd-shift-c": "keymap_editor::CopyContext",
            "cmd-t": "keymap_editor::ShowMatchingKeybinds"
        }
    },
    {
        "context": "KeystrokeInput",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "keystroke_input::StartRecording",
            "escape escape escape": "keystroke_input::StopRecording",
            "delete": "keystroke_input::ClearKeystrokes"
        }
    },
    {
        "context": "KeybindEditorModal",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-enter": "menu::Confirm",
            "escape": "menu::Cancel"
        }
    },
    {
        "context": "KeybindEditorModal > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "up": "menu::SelectPrevious",
            "down": "menu::SelectNext"
        }
    },
    {
        "context": "Onboarding",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-1": "onboarding::ActivateBasicsPage",
            "cmd-2": "onboarding::ActivateEditingPage",
            "cmd-3": "onboarding::ActivateAISetupPage",
            "cmd-escape": "onboarding::Finish"
        }
    },
    {
        "context": "VimControl && !menu",
        "bindings": {
            "t": ["workspace::SendKeystrokes", "y s"],
            "i": ["vim::PushObject", { "around": false }],
            "a": ["vim::PushObject", { "around": true }],
            "left": "vim::Left",
            "h": "vim::Left",
            "backspace": "vim::WrappingLeft",
            "down": "vim::Down",
            "j": "vim::Down",
            "ctrl-m": "vim::NextLineStart",
            "+": "vim::NextLineStart",
            "enter": "vim::NextLineStart",
            "-": "vim::PreviousLineStart",
            "shift-tab": "vim::Tab",
            "tab": "vim::Tab",
            "up": "vim::Up",
            "k": "vim::Up",
            "right": "vim::Right",
            "l": "vim::Right",
            "space": "vim::WrappingRight",
            "end": "vim::EndOfLine",
            "$": "vim::EndOfLine",
            "^": "vim::FirstNonWhitespace",
            "_": "vim::StartOfLineDownward",
            "g _": "vim::EndOfLineDownward",
            "shift-g": "vim::EndOfDocument",
            "{": "vim::StartOfParagraph",
            "}": "vim::EndOfParagraph",
            "(": "vim::SentenceBackward",
            ")": "vim::SentenceForward",
            "|": "vim::GoToColumn",
            "] ]": "vim::NextSectionStart",
            "] [": "vim::NextSectionEnd",
            "[ [": "vim::PreviousSectionStart",
            "[ ]": "vim::PreviousSectionEnd",
            "] m": "vim::NextMethodStart",
            "] shift-m": "vim::NextMethodEnd",
            "[ m": "vim::PreviousMethodStart",
            "[ shift-m": "vim::PreviousMethodEnd",
            "[ -": "vim::PreviousLesserIndent",
            "[ +": "vim::PreviousGreaterIndent",
            "[ =": "vim::PreviousSameIndent",
            "] -": "vim::NextLesserIndent",
            "] +": "vim::NextGreaterIndent",
            "] =": "vim::NextSameIndent",
            "] b": "pane::ActivateNextItem",
            "[ b": "pane::ActivatePreviousItem",
            "] shift-b": "pane::ActivateLastItem",
            "[ shift-b": ["pane::ActivateItem", 0],
            "] space": "vim::InsertEmptyLineBelow",
            "[ space": "vim::InsertEmptyLineAbove",
            "K": "editor::MoveLineUp",
            "J": "editor::MoveLineDown",

            // Word motions
            "w": "vim::NextWordStart",
            "e": "vim::NextWordEnd",
            "b": "vim::PreviousWordStart",
            "g e": "vim::PreviousWordEnd",
            // Subword motions
            // "w": "vim::NextSubwordStart",
            // "b": "vim::PreviousSubwordStart",
            // "e": "vim::NextSubwordEnd",
            // "g e": "vim::PreviousSubwordEnd",
            "shift-w": ["vim::NextWordStart", { "ignore_punctuation": true }],
            "shift-e": ["vim::NextWordEnd", { "ignore_punctuation": true }],
            "shift-b": [
                "vim::PreviousWordStart",
                { "ignore_punctuation": true }
            ],
            "g shift-e": [
                "vim::PreviousWordEnd",
                { "ignore_punctuation": true }
            ],
            "/": "vim::Search",
            "g /": "pane::DeploySearch",
            "?": ["vim::Search", { "backwards": true }],
            "*": "vim::MoveToNext",
            "#": "vim::MoveToPrevious",
            "n": "vim::MoveToNextMatch",
            "shift-n": "vim::MoveToPreviousMatch",
            "%": "vim::Matching",
            "] }": ["vim::UnmatchedForward", { "char": "}" }],
            "[ {": ["vim::UnmatchedBackward", { "char": "{" }],
            "] )": ["vim::UnmatchedForward", { "char": ")" }],
            "[ (": ["vim::UnmatchedBackward", { "char": "(" }],
            "f": [
                "vim::PushFindForward",
                { "before": false, "multiline": false }
            ],
            "shift-f": [
                "vim::PushFindBackward",
                { "after": false, "multiline": false }
            ],
            "shift-t": [
                "vim::PushFindBackward",
                { "after": true, "multiline": false }
            ],
            "m": "vim::PushMark",
            "'": ["vim::PushJump", { "line": true }],
            "`": ["vim::PushJump", { "line": false }],
            ";": "vim::RepeatFind",
            ",": "vim::RepeatFindReversed",
            "ctrl-o": "pane::GoBack",
            "ctrl-i": "pane::GoForward",
            "ctrl-]": "editor::GoToDefinition",
            "escape": "vim::SwitchToNormalMode",
            "ctrl-[": "vim::SwitchToNormalMode",
            "v": "vim::ToggleVisual",
            "shift-v": "vim::ToggleVisualLine",
            "ctrl-g": "vim::ShowLocation",
            "ctrl-v": "vim::ToggleVisualBlock",
            "shift-r": "vim::ToggleReplace",
            "0": "vim::StartOfLine",
            "home": "vim::StartOfLine",
            "ctrl-f": "vim::PageDown",
            "pagedown": "vim::PageDown",
            "ctrl-b": "vim::PageUp",
            "pageup": "vim::PageUp",
            "ctrl-d": ["workspace::SendKeystrokes", "f19 z z"],
            "ctrl-u": ["workspace::SendKeystrokes", "f20 z z"],
            "f19": "vim::ScrollDown",
            "f20": "vim::ScrollUp",
            "ctrl-e": "vim::LineDown",
            "ctrl-y": "vim::LineUp",
            // "g" commands
            "g shift-r": "vim::PushReplaceWithRegister",
            "g r n": "editor::Rename",
            "g r r": "editor::FindAllReferences",
            "g r i": "editor::GoToImplementation",
            "space c a": "editor::ToggleCodeActions",
            "g g": "vim::StartOfDocument",
            "g B": "editor::BlameHover",
            "g t": "pane::ActivateNextItem",
            "g shift-t": "pane::ActivatePreviousItem",
            "g d": "editor::GoToDefinition",
            "g r": "editor::FindAllReferences",
            "g shift-d": "editor::GoToDeclaration",
            "g y": "editor::GoToTypeDefinition",
            "g shift-i": "editor::GoToImplementation",
            "g x": "editor::OpenUrl",
            "g f": "editor::OpenSelectedFilename",
            "g n": "vim::SelectNextMatch",
            "g shift-n": "vim::SelectPreviousMatch",
            "g l": "vim::SelectNext",
            "g shift-l": "vim::SelectPrevious",
            "g >": ["editor::SelectNext", { "replace_newest": true }],
            "g <": ["editor::SelectPrevious", { "replace_newest": true }],
            "g a": "editor::SelectAllMatches",
            "g s": "outline::Toggle",
            "g shift-o": "outline::Toggle",
            "g shift-s": "project_symbols::Toggle",
            "g .": "editor::ToggleCodeActions", // zed specific
            "g shift-a": "editor::FindAllReferences", // zed specific
            "g space": "editor::OpenExcerpts", // zed specific
            "g *": ["vim::MoveToNext", { "partial_word": true }],
            "g #": ["vim::MoveToPrevious", { "partial_word": true }],
            "g j": ["vim::Down", { "display_lines": true }],
            "g down": ["vim::Down", { "display_lines": true }],
            "g k": ["vim::Up", { "display_lines": true }],
            "g up": ["vim::Up", { "display_lines": true }],
            "g $": ["vim::EndOfLine", { "display_lines": true }],
            "g end": ["vim::EndOfLine", { "display_lines": true }],
            "g 0": ["vim::StartOfLine", { "display_lines": true }],
            "g home": ["vim::StartOfLine", { "display_lines": true }],
            "g shift-m": ["vim::MiddleOfLine", { "display_lines": true }],
            "g ^": ["vim::FirstNonWhitespace", { "display_lines": true }],
            "g v": "vim::RestoreVisualSelection",
            "g ]": "editor::GoToDiagnostic",
            "g [": "editor::GoToPreviousDiagnostic",
            "g i": "vim::InsertAtPrevious",
            "g ,": "vim::ChangeListNewer",
            "g ;": "vim::ChangeListOlder",
            "shift-h": "vim::WindowTop",
            "shift-m": "vim::WindowMiddle",
            "shift-l": "vim::WindowBottom",
            "q": "vim::ToggleRecord",
            "shift-q": "vim::ReplayLastRecording",
            "@": "vim::PushReplayRegister",
            // z commands
            "z enter": ["workspace::SendKeystrokes", "z t ^"],
            "z -": ["workspace::SendKeystrokes", "z b ^"],
            "z ^": ["workspace::SendKeystrokes", "shift-h k z b ^"],
            "z +": ["workspace::SendKeystrokes", "shift-l j z t ^"],
            "z t": "editor::ScrollCursorTop",
            "z z": "editor::ScrollCursorCenter",
            "z .": ["workspace::SendKeystrokes", "z z ^"],
            "z b": "editor::ScrollCursorBottom",
            "z a": "editor::ToggleFold",
            "z shift-a": "editor::ToggleFoldRecursive",
            "z c": "editor::Fold",
            "z shift-c": "editor::FoldRecursive",
            "z o": "editor::UnfoldLines",
            "z shift-o": "editor::UnfoldRecursive",
            "z f": "editor::FoldSelectedRanges",
            "z shift-m": "editor::FoldAll",
            "z shift-r": "editor::UnfoldAll",
            "z l": "vim::ColumnRight",
            "z h": "vim::ColumnLeft",
            "z shift-l": "vim::HalfPageRight",
            "z shift-h": "vim::HalfPageLeft",
            "shift-z shift-q": [
                "pane::CloseActiveItem",
                { "save_intent": "skip" }
            ],
            "shift-z shift-z": [
                "pane::CloseActiveItem",
                { "save_intent": "save_all" }
            ],
            // Count support
            "1": ["vim::Number", 1],
            "2": ["vim::Number", 2],
            "3": ["vim::Number", 3],
            "4": ["vim::Number", 4],
            "5": ["vim::Number", 5],
            "6": ["vim::Number", 6],
            "7": ["vim::Number", 7],
            "8": ["vim::Number", 8],
            "9": ["vim::Number", 9],
            "ctrl-w d": "editor::GoToDefinitionSplit",
            "ctrl-w g d": "editor::GoToDefinitionSplit",
            "ctrl-w ]": "editor::GoToDefinitionSplit",
            "ctrl-w ctrl-]": "editor::GoToDefinitionSplit",
            "ctrl-w shift-d": "editor::GoToTypeDefinitionSplit",
            "ctrl-w g shift-d": "editor::GoToTypeDefinitionSplit",
            "ctrl-w space": "editor::OpenExcerptsSplit",
            "ctrl-w g space": "editor::OpenExcerptsSplit",
            "ctrl-6": "pane::AlternateFile",
            "ctrl-^": "pane::AlternateFile",
            ".": "vim::Repeat"
        }
    },
    {
        "context": "vim_mode == normal",
        "bindings": {
            "x": ["workspace::SendKeystrokes", "\" _ f18"],
            "f18": "vim::DeleteRight",
            "c": ["workspace::SendKeystrokes", "\" _ f17"],
            "f17": "vim::PushChange",
            "i": "vim::InsertBefore",
            "a": "vim::InsertAfter",
            "ctrl-[": "editor::Cancel",
            ":": "command_palette::Toggle",
            "shift-c": "vim::ChangeToEndOfLine",
            "d": "vim::PushDelete",
            "delete": "vim::DeleteRight",
            "g shift-j": "vim::JoinLinesNoWhitespace",
            "y": "vim::PushYank",
            "shift-x": "vim::DeleteLeft",
            "ctrl-r": "vim::Redo",
            ">": "vim::PushIndent",
            "<": "vim::PushOutdent",
            "=": "vim::PushAutoIndent",
            "!": "vim::PushShellCommand",
            "g u": "vim::PushLowercase",
            "g shift-u": "vim::PushUppercase",
            "g ~": "vim::PushOppositeCase",
            "g ?": "vim::PushRot13",
            // "g ?": "vim::PushRot47",
            "g w": "vim::PushRewrap",
            "g q": "vim::PushRewrap",
            "insert": "vim::InsertBefore",
            // tree-sitter related commands
            "[ x": "vim::SelectLargerSyntaxNode",
            "] x": "vim::SelectSmallerSyntaxNode",
            "] d": "editor::GoToDiagnostic",
            "[ d": "editor::GoToPreviousDiagnostic",
            "] c": "editor::GoToHunk",
            "[ c": "editor::GoToPreviousHunk",
            "g c": "vim::ToggleComments"
        }
    },
    {
        "context": "VimControl && VimCount",
        "bindings": {
            "0": ["vim::Number", 0],
            ":": "vim::CountCommand",
            "%": "vim::GoToPercentage"
        }
    },
    {
        "context": "vim_mode == visual",
        "bindings": {
            "x": ["workspace::SendKeystrokes", "\" _ f16"],
            "f16": "vim::VisualDelete",
            "c": ["workspace::SendKeystrokes", "\" _ f15"],
            "f15": "vim::Substitute",
            "d": "vim::VisualDelete",
            ":": "vim::VisualCommand",
            "u": "vim::ConvertToLowerCase",
            "shift-u": "vim::ConvertToUpperCase",
            "shift-o": "vim::OtherEnd",
            "o": "vim::OtherEndRowAware",
            "delete": "vim::VisualDelete",
            "shift-d": "vim::VisualDeleteLine",
            "shift-x": "vim::VisualDeleteLine",
            "y": "vim::VisualYank",
            "shift-y": "vim::VisualYankLine",
            "p": "vim::Paste",
            "shift-p": ["vim::Paste", { "preserve_clipboard": true }],
            "shift-r": "vim::SubstituteLine",
            "shift-s": "vim::SubstituteLine",
            "~": "vim::ChangeCase",
            "*": ["vim::MoveToNext", { "partial_word": true }],
            "#": ["vim::MoveToPrevious", { "partial_word": true }],
            "ctrl-a": "vim::Increment",
            "ctrl-x": "vim::Decrement",
            "g ctrl-a": ["vim::Increment", { "step": true }],
            "g ctrl-x": ["vim::Decrement", { "step": true }],
            "shift-i": "vim::InsertBefore",
            "shift-a": "vim::InsertAfter",
            "g shift-i": "vim::VisualInsertFirstNonWhiteSpace",
            "g shift-a": "vim::VisualInsertEndOfLine",
            "r": "vim::PushReplace",
            "ctrl-c": "vim::SwitchToNormalMode",
            "ctrl-[": "vim::SwitchToNormalMode",
            "escape": "vim::SwitchToNormalMode",
            ">": "vim::Indent",
            "<": "vim::Outdent",
            "=": "vim::AutoIndent",
            "!": "vim::ShellCommand",
            "i": ["vim::PushObject", { "around": false }],
            "a": ["vim::PushObject", { "around": true }],
            "g shift-r": ["vim::Paste", { "preserve_clipboard": true }],
            "g c": "vim::ToggleComments",
            "g q": "vim::Rewrap",
            "g w": "vim::Rewrap",
            "g ?": "vim::ConvertToRot13",
            // "g ?": "vim::ConvertToRot47",
            "\"": "vim::PushRegister",
            // tree-sitter related commands
            "[ x": "editor::SelectLargerSyntaxNode",
            "] x": "editor::SelectSmallerSyntaxNode"
        }
    },
    {
        "context": "vim_mode == insert",
        "bindings": {
            "j j": "vim::NormalBefore",
            "j k": "vim::NormalBefore",
            "escape": "vim::NormalBefore",
            "ctrl-x ctrl-a": "assistant::InlineAssist", // zed specific
            "ctrl-x ctrl-c": "editor::ShowEditPrediction", // zed specific
            "ctrl-x ctrl-l": "editor::ToggleCodeActions", // zed specific
            "ctrl-x ctrl-z": "editor::Cancel",
            "ctrl-w": "editor::DeleteToPreviousWordStart",
            "ctrl-u": "editor::DeleteToBeginningOfLine",
            "ctrl-t": "vim::Indent",
            "ctrl-d": "vim::Outdent",
            "ctrl-k": ["vim::PushDigraph", {}],
            "ctrl-v": ["vim::PushLiteral", {}],
            "ctrl-shift-v": "editor::Paste", // note: this is *very* similar to ctrl-v in vim, but ctrl-shift-v on linux is the typical shortcut for paste when ctrl-v is already in use.
            "ctrl-q": ["vim::PushLiteral", {}],
            "ctrl-shift-q": ["vim::PushLiteral", {}],
            "ctrl-r": "vim::PushRegister",
            "insert": "vim::ToggleReplace",
            "ctrl-o": "vim::TemporaryNormal",
            "ctrl-s": ["workspace::SendKeystrokes", "escape ctrl-s"],
            "ctrl-x": ["workspace::SendKeystrokes", "escape ctrl-x"]
        }
    },
    {
        "context": "(vim_mode == normal || vim_mode == helix_normal) && !menu",
        "bindings": {
            "escape": "editor::Cancel",
            "shift-d": "editor::Hover",
            "shift-y": "vim::YankLine",
            "shift-i": "vim::InsertFirstNonWhitespace",
            "shift-a": "vim::InsertEndOfLine",
            "o": "vim::InsertLineBelow",
            "shift-o": "vim::InsertLineAbove",
            "~": "vim::ChangeCase",
            "ctrl-a": "editor::SelectAll",
            "p": "vim::Paste",
            "shift-p": ["vim::Paste", { "before": true }],
            "u": "vim::Undo",
            "shift-u": "vim::UndoLastLine",
            "r": "vim::PushReplace",
            "s": "vim::Substitute",
            "shift-s": "vim::SubstituteLine",
            "\"": "vim::PushRegister",
            "ctrl-pagedown": "pane::ActivateNextItem",
            "ctrl-pageup": "pane::ActivatePreviousItem"
        }
    },
    {
        "context": "vim_mode == helix_normal && !menu",
        "bindings": {
            "i": "vim::HelixInsert",
            "a": "vim::HelixAppend",
            "ctrl-[": "editor::Cancel",
            ";": "vim::HelixCollapseSelection",
            ":": "command_palette::Toggle",
            "left": "vim::WrappingLeft",
            "right": "vim::WrappingRight",
            "h": "vim::WrappingLeft",
            "l": "vim::WrappingRight",
            "y": "editor::Copy",
            "alt-;": "vim::OtherEnd",
            "ctrl-r": "vim::Redo",
            "f": [
                "vim::PushFindForward",
                { "before": false, "multiline": true }
            ],
            "t": [
                "vim::PushFindForward",
                { "before": true, "multiline": true }
            ],
            "shift-f": [
                "vim::PushFindBackward",
                { "after": false, "multiline": true }
            ],
            "shift-t": [
                "vim::PushFindBackward",
                { "after": true, "multiline": true }
            ],
            ">": "vim::Indent",
            "<": "vim::Outdent",
            "=": "vim::AutoIndent",
            "g u": "vim::PushLowercase",
            "g shift-u": "vim::PushUppercase",
            "g ~": "vim::PushOppositeCase",
            "g q": "vim::PushRewrap",
            "g w": "vim::PushRewrap",
            "insert": "vim::InsertBefore",
            "alt-.": "vim::RepeatFind",
            // tree-sitter related commands
            "[ x": "editor::SelectLargerSyntaxNode",
            "] x": "editor::SelectSmallerSyntaxNode",
            "] d": "editor::GoToDiagnostic",
            "[ d": "editor::GoToPreviousDiagnostic",
            "] c": "editor::GoToHunk",
            "[ c": "editor::GoToPreviousHunk",
            // Goto mode
            "g n": "pane::ActivateNextItem",
            "g p": "pane::ActivatePreviousItem",
            // "tab": "pane::ActivateNextItem",
            // "shift-tab": "pane::ActivatePrevItem",
            "shift-h": "pane::ActivatePreviousItem",
            "shift-l": "pane::ActivateNextItem",
            "g l": "vim::EndOfLine",
            "g h": "vim::StartOfLine",
            "g s": "vim::FirstNonWhitespace", // "g s" default behavior is "space s"
            "g e": "vim::EndOfDocument",
            "g r": "editor::FindAllReferences", // zed specific
            "g t": "vim::WindowTop",
            "g c": "vim::WindowMiddle",
            "g b": "vim::WindowBottom",

            "x": "editor::SelectLine",
            "shift-x": "editor::SelectLine",
            "%": "editor::SelectAll",
            // Window mode
            "space w h": "workspace::ActivatePaneLeft",
            "space w l": "workspace::ActivatePaneRight",
            "space w k": "workspace::ActivatePaneUp",
            "space w j": "workspace::ActivatePaneDown",
            "space w q": "pane::CloseActiveItem",
            "space w s": "pane::SplitRight",
            "space w r": "pane::SplitRight",
            "space w v": "pane::SplitDown",
            "space w d": "pane::SplitDown",
            // Space mode
            "space f": "file_finder::Toggle",
            "space s": "outline::Toggle",
            "space shift-s": "project_symbols::Toggle",
            "space d": "editor::GoToDiagnostic",
            "space r": "editor::Rename",
            "space a": "editor::ToggleCodeActions",
            "space h": "editor::SelectAllMatches",
            "space c": "editor::ToggleComments",
            "space y": "editor::Copy",
            "space p": "editor::Paste",
            // Match mode
            "m m": "vim::Matching",
            "m i w": ["workspace::SendKeystrokes", "v i w"],
            "shift-u": "editor::Redo",
            "ctrl-c": "editor::ToggleComments",
            "d": "vim::HelixDelete",
            "c": "vim::Substitute",
            "shift-c": "editor::AddSelectionBelow",
            "alt-shift-c": "editor::AddSelectionAbove"
        }
    },
    {
        "context": "vim_mode == insert && !(showing_code_actions || showing_completions)",
        "bindings": {
            "ctrl-p": "editor::ShowWordCompletions",
            "ctrl-n": "editor::ShowWordCompletions"
        }
    },
    {
        "context": "(vim_mode == insert || vim_mode == normal) && showing_signature_help && !showing_completions",
        "bindings": {
            "ctrl-p": "editor::SignatureHelpPrevious",
            "ctrl-n": "editor::SignatureHelpNext"
        }
    },
    {
        "context": "vim_mode == replace",
        "bindings": {
            "ctrl-c": "vim::NormalBefore",
            "ctrl-[": "vim::NormalBefore",
            "escape": "vim::NormalBefore",
            "ctrl-k": ["vim::PushDigraph", {}],
            "ctrl-v": ["vim::PushLiteral", {}],
            "ctrl-shift-v": "editor::Paste", // note: this is *very* similar to ctrl-v in vim, but ctrl-shift-v on linux is the typical shortcut for paste when ctrl-v is already in use.
            "ctrl-q": ["vim::PushLiteral", {}],
            "ctrl-shift-q": ["vim::PushLiteral", {}],
            "backspace": "vim::UndoReplace",
            "tab": "vim::Tab",
            "enter": "vim::Enter",
            "insert": "vim::InsertBefore"
        }
    },
    {
        "context": "vim_mode == waiting",
        "bindings": {
            "tab": "vim::Tab",
            "enter": "vim::Enter",
            "ctrl-c": "vim::ClearOperators",
            "ctrl-[": "vim::ClearOperators",
            "escape": "vim::ClearOperators",
            "ctrl-k": ["vim::PushDigraph", {}],
            "ctrl-v": ["vim::PushLiteral", {}],
            "ctrl-q": ["vim::PushLiteral", {}]
        }
    },
    {
        "context": "Editor && vim_mode == waiting && (vim_operator == ys || vim_operator == cs)",
        "bindings": {
            "escape": "vim::SwitchToNormalMode"
        }
    },
    {
        "context": "vim_mode == operator",
        "bindings": {
            "ctrl-c": "vim::ClearOperators",
            "ctrl-[": "vim::ClearOperators",
            "escape": "vim::ClearOperators",
            "g c": "vim::Comment"
        }
    },
    {
        "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
        "bindings": {
            "w": "vim::Word",
            "shift-w": ["vim::Word", { "ignore_punctuation": true }],
            // Subword TextObject
            // "w": "vim::Subword",
            // "shift-w": ["vim::Subword", { "ignore_punctuation": true }],
            "t": "vim::Tag",
            "s": "vim::Sentence",
            "p": "vim::Paragraph",
            "'": "vim::Quotes",
            "`": "vim::BackQuotes",
            "\"": "vim::DoubleQuotes",
            // "q": "vim::AnyQuotes",
            "q": "vim::MiniQuotes",
            "|": "vim::VerticalBars",
            "(": "vim::Parentheses",
            ")": "vim::Parentheses",
            "b": "vim::Parentheses",
            // "b": "vim::AnyBrackets",
            // "b": "vim::MiniBrackets",
            "[": "vim::SquareBrackets",
            "]": "vim::SquareBrackets",
            "r": "vim::SquareBrackets",
            "{": "vim::CurlyBrackets",
            "}": "vim::CurlyBrackets",
            "shift-b": "vim::CurlyBrackets",
            "<": "vim::AngleBrackets",
            ">": "vim::AngleBrackets",
            "a": "vim::Argument",
            "i": "vim::IndentObj",
            "shift-i": ["vim::IndentObj", { "include_below": true }],
            "f": "vim::Method",
            "c": "vim::Class",
            "e": "vim::EntireFile"
        }
    },
    {
        "context": "vim_operator == c",
        "bindings": {
            "c": "vim::CurrentLine",
            "x": "vim::Exchange",
            "d": "editor::Rename", // zed specific
            "s": ["vim::PushChangeSurrounds", {}]
        }
    },
    {
        "context": "vim_mode == normal",
        "bindings": {
            "space g r": "git::RestoreFile",
            "space g d": "editor::ToggleSelectedDiffHunks",
            "space g o": "editor::ExpandAllDiffHunks",
            "space c r": "editor::Rename"
        }
    },
    {
        "context": "vim_mode == visual",
        "bindings": {
            "space g r": "git::Restore",
            "space g d": "editor::ToggleSelectedDiffHunks"
        }
    },
    {
        "context": "vim_operator == d",
        "bindings": {
            "d": "vim::CurrentLine",
            "s": "vim::PushDeleteSurrounds",
            "v": "vim::PushForcedMotion", // "d v"
            "o": "editor::ToggleSelectedDiffHunks", // "d o"
            "shift-o": "git::ToggleStaged",
            "u": "git::StageAndNext", // "d u"
            "shift-u": "git::UnstageAndNext" // "d shift-u"
        }
    },
    {
        "context": "vim_operator == gu",
        "bindings": {
            "g u": "vim::CurrentLine",
            "u": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == gU",
        "bindings": {
            "g shift-u": "vim::CurrentLine",
            "shift-u": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == g~",
        "bindings": {
            "g ~": "vim::CurrentLine",
            "~": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == g?",
        "bindings": {
            "g ?": "vim::CurrentLine",
            "?": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == gq",
        "bindings": {
            "g q": "vim::CurrentLine",
            "q": "vim::CurrentLine",
            "g w": "vim::CurrentLine",
            "w": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == y",
        "bindings": {
            "y": "vim::CurrentLine",
            "v": "vim::PushForcedMotion",
            "s": "vim::PushAddSurrounds",
            "f": "workspace::CopyRelativePath",
            "l": "editor::CopyFileLocation"
        }
    },
    {
        "context": "vim_operator == ys",
        "bindings": {
            "s": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == >",
        "bindings": {
            ">": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == <",
        "bindings": {
            "<": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == eq",
        "bindings": {
            "=": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == sh",
        "bindings": {
            "!": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == gc",
        "bindings": {
            "c": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == gR",
        "bindings": {
            "r": "vim::CurrentLine",
            "shift-r": "vim::CurrentLine"
        }
    },
    {
        "context": "vim_operator == cx",
        "bindings": {
            "x": "vim::CurrentLine",
            "c": "vim::ClearExchange"
        }
    },
    {
        "context": "vim_mode == literal",
        "bindings": {
            "ctrl-@": ["vim::Literal", ["ctrl-@", "\u0000"]],
            "ctrl-a": ["vim::Literal", ["ctrl-a", "\u0001"]],
            "ctrl-b": ["vim::Literal", ["ctrl-b", "\u0002"]],
            "ctrl-c": ["vim::Literal", ["ctrl-c", "\u0003"]],
            "ctrl-d": ["vim::Literal", ["ctrl-d", "\u0004"]],
            "ctrl-e": ["vim::Literal", ["ctrl-e", "\u0005"]],
            "ctrl-f": ["vim::Literal", ["ctrl-f", "\u0006"]],
            "ctrl-g": ["vim::Literal", ["ctrl-g", "\u0007"]],
            "ctrl-h": ["vim::Literal", ["ctrl-h", "\u0008"]],
            "ctrl-i": ["vim::Literal", ["ctrl-i", "\u0009"]],
            "ctrl-j": ["vim::Literal", ["ctrl-j", "\u000A"]],
            "ctrl-k": ["vim::Literal", ["ctrl-k", "\u000B"]],
            "ctrl-l": ["vim::Literal", ["ctrl-l", "\u000C"]],
            "ctrl-m": ["vim::Literal", ["ctrl-m", "\u000D"]],
            "ctrl-n": ["vim::Literal", ["ctrl-n", "\u000E"]],
            "ctrl-o": ["vim::Literal", ["ctrl-o", "\u000F"]],
            "ctrl-p": ["vim::Literal", ["ctrl-p", "\u0010"]],
            "ctrl-q": ["vim::Literal", ["ctrl-q", "\u0011"]],
            "ctrl-r": ["vim::Literal", ["ctrl-r", "\u0012"]],
            "ctrl-s": ["vim::Literal", ["ctrl-s", "\u0013"]],
            "ctrl-t": ["vim::Literal", ["ctrl-t", "\u0014"]],
            "ctrl-u": ["vim::Literal", ["ctrl-u", "\u0015"]],
            "ctrl-v": ["vim::Literal", ["ctrl-v", "\u0016"]],
            "ctrl-w": ["vim::Literal", ["ctrl-w", "\u0017"]],
            "ctrl-x": ["vim::Literal", ["ctrl-x", "\u0018"]],
            "ctrl-y": ["vim::Literal", ["ctrl-y", "\u0019"]],
            "ctrl-z": ["vim::Literal", ["ctrl-z", "\u001A"]],
            "ctrl-[": ["vim::Literal", ["ctrl-[", "\u001B"]],
            "ctrl-\\": ["vim::Literal", ["ctrl-\\", "\u001C"]],
            "ctrl-]": ["vim::Literal", ["ctrl-]", "\u001D"]],
            "ctrl-^": ["vim::Literal", ["ctrl-^", "\u001E"]],
            "ctrl-_": ["vim::Literal", ["ctrl-_", "\u001F"]],
            "escape": ["vim::Literal", ["escape", "\u001B"]],
            "enter": ["vim::Literal", ["enter", "\u000D"]],
            "tab": ["vim::Literal", ["tab", "\u0009"]],
            // zed extensions:
            "backspace": ["vim::Literal", ["backspace", "\u0008"]],
            "delete": ["vim::Literal", ["delete", "\u007F"]]
        }
    },
    {
        "context": "BufferSearchBar && !in_replace",
        "bindings": {
            "enter": "vim::SearchSubmit",
            "escape": "buffer_search::Dismiss"
        }
    },
    {
        "context": "!Editor && !Terminal",
        "bindings": {
            ":": "command_palette::Toggle",
            "g /": "pane::DeploySearch"
        }
    },
    {
        // netrw compatibility
        "context": "ProjectPanel && not_editing",
        "bindings": {
            ":": "command_palette::Toggle",
            "/": "project_panel::NewSearchInDirectory",
            "enter": "project_panel::OpenPermanent",
            "h": "project_panel::CollapseSelectedEntry",
            "j": "menu::SelectNext",
            "k": "menu::SelectPrevious",
            "l": "project_panel::ExpandSelectedEntry",
            "o": "project_panel::OpenWithSystem",
            "] c": "project_panel::SelectNextGitEntry",
            "[ c": "project_panel::SelectPrevGitEntry",
            "] d": "project_panel::SelectNextDiagnostic",
            "[ d": "project_panel::SelectPrevDiagnostic",
            "}": "project_panel::SelectNextDirectory",
            "{": "project_panel::SelectPrevDirectory",
            "shift-g": "menu::SelectLast",
            "-": "project_panel::SelectParent",
            "shift-n": "project_panel::NewDirectory",
            "r": "project_panel::Rename",
            "n": "project_panel::NewFile",
            "d": "project_panel::Delete"
        }
    },
    {
        "context": "OutlinePanel && not_editing",
        "bindings": {
            "j": "menu::SelectNext",
            "k": "menu::SelectPrevious",
            "shift-g": "menu::SelectLast",
            "g g": "menu::SelectFirst"
        }
    },
    {
        "context": "GitPanel && ChangesList",
        "use_key_equivalents": true,
        "bindings": {
            "k": "menu::SelectPrevious",
            "j": "menu::SelectNext",
            "g g": "menu::SelectFirst",
            "shift-g": "menu::SelectLast",
            "g f": "menu::Confirm",
            "i": "git_panel::FocusEditor",
            "x": "git::ToggleStaged",
            "shift-x": "git::StageAll",
            "g x": "git::StageRange",
            "shift-u": "git::UnstageAll"
        }
    },
    {
        "context": "Editor && mode == auto_height && VimControl",
        "bindings": {
            // TODO: Implement search
            "/": null,
            "?": null,
            "#": null,
            "*": null,
            "n": null,
            "shift-n": null
        }
    },
    {
        "context": "Picker > Editor",
        "bindings": {
            "ctrl-h": "editor::Backspace",
            "ctrl-u": "editor::DeleteToBeginningOfLine",
            "ctrl-w": "editor::DeleteToPreviousWordStart"
        }
    },
    {
        "context": "GitCommit > Editor && VimControl && vim_mode == normal",
        "bindings": {
            "ctrl-c": "menu::Cancel",
            "escape": "menu::Cancel"
        }
    },
    {
        "context": "MessageEditor > Editor && VimControl",
        "bindings": {
            "enter": "agent::Chat"
        }
    },
    {
        "context": "Editor && mode == full && VimControl && multibuffer",
        "bindings": {
            "enter": "editor::OpenExcerpts",
            "ctrl-f": "editor::MoveToStartOfNextExcerpt",
            "ctrl-b": "editor::MoveToStartOfExcerpt"
        }
    }
]
