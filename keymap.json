[
    // Bindings from VS Code
    {
        "context": "Editor",
        "use_key_equivalents": true,
        "bindings": {
            "f6": "editor::Rename",
            "ctrl-space": "editor::ShowCompletions",
            "ctrl-shift-space": "editor::ShowWordCompletions",
            "f1": "editor::RevealInFileManager",
            "cmd-k p": "workspace::CopyPath",
            "shift-\\": "pane::SplitRight"
        }
    },
    {
        "context": "Editor && extension == md",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-k v": "markdown::OpenPreviewToTheSide",
            "cmd-shift-v": "markdown::OpenPreview"
        }
    },
    {
        "context": "Editor && extension == svg",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-k v": "svg::OpenPreviewToTheSide",
            "cmd-shift-v": "svg::OpenPreview"
        }
    },
    {
        "context": "Editor && mode == full",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-o": "outline::Toggle",
            "ctrl-g": "go_to_line::Toggle",
            "cmd-shift-backspace": "editor::GoToPreviousChange",
            "cmd-shift-alt-backspace": "editor::GoToNextChange"
        }
    },
    {
        "context": "Workspace",
        "use_key_equivalents": true,
        "bindings": {
            // Change the default action on `menu::Confirm` by setting the parameter
            // "alt-cmd-o": ["projects::OpenRecent", {"create_new_window": true }],
            "alt-cmd-o": [
                "projects::OpenRecent",
                { "create_new_window": false }
            ],
            "cmd-ctrl-b": "git::Branch",
            "cmd-5": "workspace::NewTerminal",
            "ctrl-s": "workspace::Save",
            "alt-shift-enter": "toast::RunAction",
            "cmd-shift-s": "workspace::SaveAs",
            "cmd-shift-n": "workspace::NewWindow",
            "ctrl-`": "terminal_panel::ToggleFocus",
            "cmd-b": "workspace::ToggleLeftDock",
            "cmd-alt-b": "workspace::ToggleRightDock",
            "cmd-r": "workspace::ToggleRightDock",
            "cmd-j": "workspace::ToggleBottomDock",
            "alt-cmd-y": "workspace::CloseAllDocks",
            // For 0px parameter, uses UI font size value.
            "ctrl-alt-0": "workspace::ResetActiveDockSize",
            "ctrl-alt--": ["workspace::DecreaseActiveDockSize", { "px": 0 }],
            "ctrl-alt-=": ["workspace::IncreaseActiveDockSize", { "px": 0 }],
            "ctrl-alt-)": "workspace::ResetOpenDocksSize",
            "ctrl-alt-_": ["workspace::DecreaseOpenDocksSize", { "px": 0 }],
            "ctrl-alt-+": ["workspace::IncreaseOpenDocksSize", { "px": 0 }],
            "cmd-shift-f": "pane::DeploySearch",
            "cmd-shift-h": ["pane::DeploySearch", { "replace_enabled": true }],
            "cmd-shift-t": "pane::ReopenClosedItem",
            "cmd-k cmd-s": "zed::OpenKeymapEditor",
            "cmd-k cmd-t": "theme_selector::Toggle",
            "ctrl-alt-cmd-p": "settings_profile_selector::Toggle",
            "cmd-t": "project_symbols::Toggle",
            "cmd-p": "file_finder::Toggle",
            "ctrl-tab": "tab_switcher::Toggle",
            "ctrl-shift-tab": ["tab_switcher::Toggle", { "select_last": true }],
            "cmd-shift-p": "command_palette::Toggle",
            "cmd-shift-e": "project_panel::ToggleFocus",
            "cmd-shift-b": "outline_panel::ToggleFocus",
            "ctrl-shift-g": "git_panel::ToggleFocus",
            "cmd-shift-d": "debug_panel::ToggleFocus",
            "cmd-?": "agent::ToggleFocus",
            "cmd-alt-s": "workspace::SaveAll",
            "cmd-k m": "language_selector::Toggle",
            "escape": "workspace::Unfollow",
            "cmd-k cmd-left": "workspace::ActivatePaneLeft",
            "cmd-k cmd-right": "workspace::ActivatePaneRight",
            "cmd-k cmd-up": "workspace::ActivatePaneUp",
            "cmd-k cmd-down": "workspace::ActivatePaneDown",
            "cmd-k shift-left": "workspace::SwapPaneLeft",
            "cmd-k shift-right": "workspace::SwapPaneRight",
            "cmd-k shift-up": "workspace::SwapPaneUp",
            "cmd-k shift-down": "workspace::SwapPaneDown",
            "cmd-shift-x": "zed::Extensions",
            "f5": "debugger::Rerun",
            "cmd-w": "workspace::CloseActiveDock"
        }
    },
    {
        "context": "Workspace && !Terminal",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-n": "workspace::NewFile",
            "cmd-shift-r": "task::Spawn",
            "cmd-alt-r": "task::Rerun",
            "ctrl-alt-shift-r": ["task::Spawn", { "reveal_target": "center" }]
            // also possible to spawn tasks by name:
            // "foo-bar": ["task::Spawn", { "task_name": "MyTask", "reveal_target": "dock" }]
            // or by tag:
            // "foo-bar": ["task::Spawn", { "task_tag": "MyTag" }],
        }
    },
    {
        "context": "Workspace && debugger_running",
        "use_key_equivalents": true,
        "bindings": {
            "f5": "zed::NoAction"
        }
    },
    {
        "context": "Workspace && debugger_stopped",
        "use_key_equivalents": true,
        "bindings": {
            "f5": "debugger::Continue"
        }
    },
    // Bindings from Sublime Text
    {
        "context": "Editor",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-u": "editor::UndoSelection",
            "cmd-shift-u": "editor::RedoSelection",
            "ctrl-j": "editor::JoinLines",
            "ctrl-alt-backspace": "editor::DeleteToPreviousSubwordStart",
            "ctrl-alt-h": "editor::DeleteToPreviousSubwordStart",
            "ctrl-alt-delete": "editor::DeleteToNextSubwordEnd",
            "ctrl-alt-d": "editor::DeleteToNextSubwordEnd",
            "ctrl-alt-left": "editor::MoveToPreviousSubwordStart",
            "ctrl-alt-b": "editor::MoveToPreviousSubwordStart",
            "ctrl-alt-right": "editor::MoveToNextSubwordEnd",
            "ctrl-alt-f": "editor::MoveToNextSubwordEnd",
            "ctrl-alt-shift-left": "editor::SelectToPreviousSubwordStart",
            "ctrl-alt-shift-b": "editor::SelectToPreviousSubwordStart",
            "ctrl-alt-shift-right": "editor::SelectToNextSubwordEnd",
            "ctrl-alt-shift-f": "editor::SelectToNextSubwordEnd"
        }
    },
    // Bindings from Atom
    {
        "context": "Pane",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-k up": "pane::SplitUp",
            "cmd-k down": "pane::SplitDown",
            "cmd-k left": "pane::SplitLeft",
            "cmd-k right": "pane::SplitRight"
        }
    },
    // Bindings that should be unified with bindings for more general actions
    {
        "context": "Editor && renaming",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::ConfirmRename"
        }
    },
    {
        "context": "Editor && showing_completions",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::ConfirmCompletion",
            "shift-enter": "editor::ConfirmCompletionReplace",
            "tab": "editor::ComposeCompletion"
        }
    },
    {
        "context": "Editor && edit_prediction",
        "bindings": {
            "alt-tab": "editor::AcceptEditPrediction",
            "tab": "editor::AcceptEditPrediction",
            "ctrl-cmd-right": "editor::AcceptPartialEditPrediction"
        }
    },
    {
        "context": "Editor && edit_prediction_conflict",
        "use_key_equivalents": true,
        "bindings": {
            "alt-tab": "editor::AcceptEditPrediction",
            "ctrl-cmd-right": "editor::AcceptPartialEditPrediction"
        }
    },
    {
        "context": "Editor && showing_code_actions",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::ConfirmCodeAction"
        }
    },
    {
        "context": "Editor && (showing_code_actions || showing_completions)",
        "use_key_equivalents": true,
        "bindings": {
            "up": "editor::ContextMenuPrevious",
            "ctrl-p": "editor::ContextMenuPrevious",
            "down": "editor::ContextMenuNext",
            "ctrl-n": "editor::ContextMenuNext",
            "pageup": "editor::ContextMenuFirst",
            "pagedown": "editor::ContextMenuLast"
        }
    },
    {
        "context": "Editor && showing_signature_help && !showing_completions",
        "bindings": {
            "up": "editor::SignatureHelpPrevious",
            "down": "editor::SignatureHelpNext"
        }
    },
    // Custom bindings
    {
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-alt-cmd-f": "workspace::FollowNextCollaborator",
            // TODO: Move this to a dock open action
            "cmd-shift-c": "collab_panel::ToggleFocus",
            // Only available in debug builds: opens an element inspector for development.
            "cmd-alt-i": "dev::ToggleInspector"
        }
    },
    {
        "context": "!ContextEditor > Editor && mode == full",
        "use_key_equivalents": true,
        "bindings": {
            "alt-enter": "editor::OpenExcerpts",
            "shift-enter": "editor::ExpandExcerpts",
            "cmd-alt-enter": "editor::OpenExcerptsSplit",
            "cmd-shift-e": "pane::RevealInProjectPanel",
            "cmd-f8": "editor::GoToHunk",
            "cmd-shift-f8": "editor::GoToPreviousHunk",
            "ctrl-enter": "assistant::InlineAssist",
            "ctrl-:": "editor::ToggleInlayHints"
        }
    },
    {
        "context": "PromptEditor",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-a": "agent::ToggleContextPicker",
            "cmd-alt-/": "agent::ToggleModelSelector",
            "cmd-alt-e": "agent::RemoveAllContext",
            "ctrl-[": "agent::CyclePreviousInlineAssist",
            "ctrl-]": "agent::CycleNextInlineAssist"
        }
    },
    {
        "context": "Prompt",
        "use_key_equivalents": true,
        "bindings": {
            "left": "menu::SelectPrevious",
            "right": "menu::SelectNext",
            "h": "menu::SelectPrevious",
            "l": "menu::SelectNext"
        }
    },
    {
        "context": "ProjectSearchBar && !in_replace",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-enter": "project_search::SearchInNew"
        }
    },
    {
        "context": "OutlinePanel && not_editing",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "menu::Cancel",
            "left": "outline_panel::CollapseSelectedEntry",
            "right": "outline_panel::ExpandSelectedEntry",
            "cmd-alt-c": "workspace::CopyPath",
            "alt-cmd-shift-c": "workspace::CopyRelativePath",
            "alt-cmd-r": "outline_panel::RevealInFileManager",
            "space": "outline_panel::OpenSelectedEntry",
            "shift-down": "menu::SelectNext",
            "shift-up": "menu::SelectPrevious",
            "alt-enter": "editor::OpenExcerpts",
            "cmd-alt-enter": "editor::OpenExcerptsSplit"
        }
    },
    {
        "context": "ProjectPanel",
        "use_key_equivalents": true,
        "bindings": {
            "left": "project_panel::CollapseSelectedEntry",
            "right": "project_panel::ExpandSelectedEntry",
            "cmd-n": "project_panel::NewFile",
            "cmd-d": "project_panel::Duplicate",
            "alt-cmd-n": "project_panel::NewDirectory",
            "cmd-x": "project_panel::Cut",
            "cmd-c": "project_panel::Copy",
            "cmd-v": "project_panel::Paste",
            "cmd-alt-c": "workspace::CopyPath",
            "alt-cmd-shift-c": "workspace::CopyRelativePath",
            "enter": "project_panel::Rename",
            "f2": "project_panel::Rename",
            "backspace": ["project_panel::Trash", { "skip_prompt": false }],
            "delete": ["project_panel::Trash", { "skip_prompt": false }],
            "cmd-backspace": ["project_panel::Trash", { "skip_prompt": true }],
            "cmd-delete": ["project_panel::Delete", { "skip_prompt": false }],
            "alt-cmd-r": "project_panel::RevealInFileManager",
            "ctrl-shift-enter": "project_panel::OpenWithSystem",
            "cmd-alt-backspace": [
                "project_panel::Delete",
                { "skip_prompt": false }
            ],
            "cmd-alt-shift-f": "project_panel::NewSearchInDirectory",
            "shift-down": "menu::SelectNext",
            "shift-up": "menu::SelectPrevious",
            "escape": "menu::Cancel"
        }
    },
    {
        "context": "ProjectPanel && not_editing",
        "use_key_equivalents": true,
        "bindings": {
            "space": "project_panel::Open"
        }
    },
    {
        "context": "VariableList",
        "use_key_equivalents": true,
        "bindings": {
            "left": "variable_list::CollapseSelectedEntry",
            "right": "variable_list::ExpandSelectedEntry",
            "enter": "variable_list::EditVariable",
            "cmd-c": "variable_list::CopyVariableValue",
            "cmd-alt-c": "variable_list::CopyVariableName",
            "delete": "variable_list::RemoveWatch",
            "backspace": "variable_list::RemoveWatch",
            "alt-enter": "variable_list::AddWatch"
        }
    },
    {
        "context": "GitPanel && ChangesList",
        "use_key_equivalents": true,
        "bindings": {
            "up": "menu::SelectPrevious",
            "down": "menu::SelectNext",
            "cmd-up": "menu::SelectFirst",
            "cmd-down": "menu::SelectLast",
            "enter": "menu::Confirm",
            "cmd-alt-y": "git::ToggleStaged",
            "space": "git::ToggleStaged",
            "shift-space": "git::StageRange",
            "cmd-y": "git::StageFile",
            "cmd-shift-y": "git::UnstageFile",
            "alt-down": "git_panel::FocusEditor",
            "tab": "git_panel::FocusEditor",
            "shift-tab": "git_panel::FocusEditor",
            "escape": "git_panel::ToggleFocus",
            "backspace": ["git::RestoreFile", { "skip_prompt": false }],
            "delete": ["git::RestoreFile", { "skip_prompt": false }],
            "cmd-backspace": ["git::RestoreFile", { "skip_prompt": true }],
            "cmd-delete": ["git::RestoreFile", { "skip_prompt": true }]
        }
    },
    {
        "context": "GitPanel && CommitEditor",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "git::Cancel"
        }
    },
    {
        "context": "GitDiff > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-enter": "git::Commit",
            "cmd-shift-enter": "git::Amend",
            "cmd-ctrl-y": "git::StageAll",
            "cmd-ctrl-shift-y": "git::UnstageAll"
        }
    },
    {
        "context": "CommitEditor > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::Newline",
            "cmd-enter": "git::Commit",
            "cmd-shift-enter": "git::Amend",
            "tab": "git_panel::FocusChanges",
            "shift-tab": "git_panel::FocusChanges",
            "alt-up": "git_panel::FocusChanges",
            "shift-escape": "git::ExpandCommitEditor",
            "alt-tab": "git::GenerateCommitMessage"
        }
    },
    {
        "context": "GitPanel",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-g ctrl-g": "git::Fetch",
            "ctrl-g up": "git::Push",
            "ctrl-g down": "git::Pull",
            "ctrl-g shift-up": "git::ForcePush",
            "ctrl-g d": "git::Diff",
            "ctrl-g backspace": "git::RestoreTrackedFiles",
            "ctrl-g shift-backspace": "git::TrashUntrackedFiles",
            "cmd-ctrl-y": "git::StageAll",
            "cmd-ctrl-shift-y": "git::UnstageAll",
            "cmd-enter": "git::Commit",
            "cmd-shift-enter": "git::Amend"
        }
    },
    {
        "context": "GitCommit > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "editor::Newline",
            "escape": "menu::Cancel",
            "cmd-enter": "git::Commit",
            "cmd-shift-enter": "git::Amend",
            "alt-tab": "git::GenerateCommitMessage"
        }
    },
    {
        "context": "DebugPanel",
        "bindings": {
            "cmd-t": "debugger::ToggleThreadPicker",
            "cmd-i": "debugger::ToggleSessionPicker",
            "shift-alt-escape": "debugger::ToggleExpandItem"
        }
    },
    {
        "context": "BreakpointList",
        "bindings": {
            "space": "debugger::ToggleEnableBreakpoint",
            "backspace": "debugger::UnsetBreakpoint",
            "left": "debugger::PreviousBreakpointProperty",
            "right": "debugger::NextBreakpointProperty"
        }
    },
    {
        "context": "CollabPanel && not_editing",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-backspace": "collab_panel::Remove",
            "space": "menu::Confirm"
        }
    },
    {
        "context": "CollabPanel",
        "use_key_equivalents": true,
        "bindings": {
            "alt-up": "collab_panel::MoveChannelUp",
            "alt-down": "collab_panel::MoveChannelDown"
        }
    },
    {
        "context": "(CollabPanel && editing) > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "space": "collab_panel::InsertSpace"
        }
    },
    {
        "context": "ChannelModal",
        "use_key_equivalents": true,
        "bindings": {
            "tab": "channel_modal::ToggleMode"
        }
    },
    {
        "context": "Picker > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "menu::Cancel",
            "up": "menu::SelectPrevious",
            "down": "menu::SelectNext",
            "tab": "picker::ConfirmCompletion",
            "alt-enter": ["picker::ConfirmInput", { "secondary": false }],
            "cmd-alt-enter": ["picker::ConfirmInput", { "secondary": true }]
        }
    },
    {
        "context": "ChannelModal > Picker > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "tab": "channel_modal::ToggleMode"
        }
    },
    {
        "context": "FileFinder || (FileFinder > Picker > Editor)",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-a": "file_finder::ToggleSplitMenu",
            "cmd-shift-i": "file_finder::ToggleFilterMenu"
        }
    },
    {
        "context": "FileFinder || (FileFinder > Picker > Editor) || (FileFinder > Picker > menu)",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-p": "file_finder::SelectPrevious",
            "cmd-j": "pane::SplitDown",
            "cmd-k": "pane::SplitUp",
            "cmd-h": "pane::SplitLeft",
            "cmd-l": "pane::SplitRight"
        }
    },
    {
        "context": "TabSwitcher",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-shift-tab": "menu::SelectPrevious",
            "ctrl-up": "menu::SelectPrevious",
            "ctrl-down": "menu::SelectNext",
            "ctrl-backspace": "tab_switcher::CloseSelectedItem"
        }
    },
    {
        "context": "Terminal",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-cmd-space": "terminal::ShowCharacterPalette",
            "cmd-c": "terminal::Copy",
            "cmd-v": "terminal::Paste",
            "cmd-f": "buffer_search::Deploy",
            "cmd-a": "editor::SelectAll",
            "cmd-k": "terminal::Clear",
            "cmd-n": "workspace::NewTerminal",
            "ctrl-enter": "assistant::InlineAssist",
            "ctrl-_": null, // emacs undo
            // Some nice conveniences
            "cmd-backspace": ["terminal::SendText", "\u0015"], // ctrl-u: clear line
            "alt-delete": ["terminal::SendText", "\u001bd"], // alt-d: delete word forward
            "cmd-delete": ["terminal::SendText", "\u000b"], // ctrl-k: delete to end of line
            "cmd-right": ["terminal::SendText", "\u0005"],
            "cmd-left": ["terminal::SendText", "\u0001"],
            // Terminal.app compatibility
            "alt-left": ["terminal::SendText", "\u001bb"],
            "alt-right": ["terminal::SendText", "\u001bf"],
            "alt-b": ["terminal::SendText", "\u001bb"],
            "alt-f": ["terminal::SendText", "\u001bf"],
            "ctrl-delete": ["terminal::SendText", "\u001bd"],
            // There are conflicting bindings for these keys in the global context.
            // these bindings override them, remove at your own risk:
            "up": ["terminal::SendKeystroke", "up"],
            "pageup": ["terminal::SendKeystroke", "pageup"],
            "down": ["terminal::SendKeystroke", "down"],
            "pagedown": ["terminal::SendKeystroke", "pagedown"],
            "escape": ["terminal::SendKeystroke", "escape"],
            "enter": ["terminal::SendKeystroke", "enter"],
            "ctrl-c": ["terminal::SendKeystroke", "ctrl-c"],
            "ctrl-backspace": ["terminal::SendKeystroke", "ctrl-w"],
            "shift-pageup": "terminal::ScrollPageUp",
            "cmd-up": "terminal::ScrollPageUp",
            "shift-pagedown": "terminal::ScrollPageDown",
            "cmd-down": "terminal::ScrollPageDown",
            "shift-up": "terminal::ScrollLineUp",
            "shift-down": "terminal::ScrollLineDown",
            "shift-home": "terminal::ScrollToTop",
            "cmd-home": "terminal::ScrollToTop",
            "shift-end": "terminal::ScrollToBottom",
            "cmd-end": "terminal::ScrollToBottom",
            // Using `ctrl-shift-space` in Zed requires disabling the macOS global shortcut.
            // System Preferences->Keyboard->Keyboard Shortcuts->Input Sources->Select the previous input source (uncheck)
            "ctrl-shift-space": "terminal::ToggleViMode",
            "ctrl-alt-up": "pane::SplitUp",
            "ctrl-alt-down": "pane::SplitDown",
            "ctrl-alt-left": "pane::SplitLeft",
            "ctrl-alt-right": "pane::SplitRight",
            "cmd-alt-r": "terminal::RerunTask"
        }
    },
    {
        "context": "RateCompletionModal",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-shift-enter": "zeta::ThumbsUpActiveCompletion",
            "cmd-shift-backspace": "zeta::ThumbsDownActiveCompletion",
            "shift-down": "zeta::NextEdit",
            "shift-up": "zeta::PreviousEdit",
            "right": "zeta::PreviewCompletion"
        }
    },
    {
        "context": "RateCompletionModal > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "zeta::FocusCompletions",
            "cmd-shift-enter": "zeta::ThumbsUpActiveCompletion",
            "cmd-shift-backspace": "zeta::ThumbsDownActiveCompletion"
        }
    },
    {
        "context": "ZedPredictModal",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "menu::Cancel"
        }
    },
    {
        "context": "ConfigureContextServerModal > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "escape": "menu::Cancel",
            "enter": "editor::Newline",
            "cmd-enter": "menu::Confirm"
        }
    },
    {
        "context": "Diagnostics",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-r": "diagnostics::ToggleDiagnosticsRefresh"
        }
    },
    {
        "context": "DebugConsole > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "menu::Confirm",
            "alt-enter": "console::WatchExpression"
        }
    },
    {
        "context": "RunModal",
        "use_key_equivalents": true,
        "bindings": {
            "ctrl-tab": "pane::ActivateNextItem",
            "ctrl-shift-tab": "pane::ActivatePreviousItem"
        }
    },
    {
        "context": "MarkdownPreview",
        "bindings": {
            "pageup": "markdown::MovePageUp",
            "pagedown": "markdown::MovePageDown"
        }
    },
    {
        "context": "KeymapEditor",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-f": "search::FocusSearch",
            "cmd-alt-f": "keymap_editor::ToggleKeystrokeSearch",
            "cmd-alt-c": "keymap_editor::ToggleConflictFilter",
            "enter": "keymap_editor::EditBinding",
            "alt-enter": "keymap_editor::CreateBinding",
            "cmd-c": "keymap_editor::CopyAction",
            "cmd-shift-c": "keymap_editor::CopyContext",
            "cmd-t": "keymap_editor::ShowMatchingKeybinds"
        }
    },
    {
        "context": "KeystrokeInput",
        "use_key_equivalents": true,
        "bindings": {
            "enter": "keystroke_input::StartRecording",
            "escape escape escape": "keystroke_input::StopRecording",
            "delete": "keystroke_input::ClearKeystrokes"
        }
    },
    {
        "context": "KeybindEditorModal",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-enter": "menu::Confirm",
            "escape": "menu::Cancel"
        }
    },
    {
        "context": "KeybindEditorModal > Editor",
        "use_key_equivalents": true,
        "bindings": {
            "up": "menu::SelectPrevious",
            "down": "menu::SelectNext"
        }
    },
    {
        "context": "Onboarding",
        "use_key_equivalents": true,
        "bindings": {
            "cmd-1": "onboarding::ActivateBasicsPage",
            "cmd-2": "onboarding::ActivateEditingPage",
            "cmd-3": "onboarding::ActivateAISetupPage",
            "cmd-escape": "onboarding::Finish"
        }
    }
]
